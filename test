#!/bin/sh
set -ex

# Collect the binaries under test and the test ledger.
IDXR="$(pwd)"/target/release/mina-indexer
LEDGER="$(pwd)"/tests/data/genesis_ledgers/mainnet.json
BLOCKS_FETCHER="$(pwd)"/download_blocks

# The rest of this script's logic assumes that the testing is done from within
# this temporary directory.
TEST_DIR="$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')"
cd "$TEST_DIR"

# Invoke this function when exiting this script for any reason.
test_cleanup() {
    err=$?
    if [ $err != 0 ]; then
        echo "\e[0;31mTest failed ($test): $err\e[0;37m"
        exit 1
    fi
    rm -rf "${TEST_DIR}"
}

trap test_cleanup EXIT

idxr() {
    RUST_BACKTRACE=full "$IDXR" "$@"
}

idxr_server() {
    RUST_BACKTRACE=full "$IDXR" server "$@" &
    echo $! > idxr_pid
}

idxr_server_start() {
    idxr_server start "$@"
}

dl_mainnet() {
    "$BLOCKS_FETCHER" mina_network_block_data 2 "$1" mainnet "$2"
}

dl_mainnet_single() {
    "$BLOCKS_FETCHER" mina_network_block_data "$1" "$1" mainnet "$2"
}

dl_mainnet_range() {
    "$BLOCKS_FETCHER" mina_network_block_data "$1" "$2" mainnet "$3"
}

assert() {
    expected="$1"
    actual="$2"

    if [ "$expected" != "$actual" ]; then
        echo "\e[0;31mTest Failed: Expected $expected, but got $actual\e[0;37m"
        exit 1
    else
        echo "Test Passed!"
    fi
}

assert_directory_exists() {
    directory="$1"

    if [ ! -d "$directory" ]; then
        echo "Test Failed: Expected directory $directory to exist, but it does not."
        exit 1
    else
        echo "Test Passed: Directory $directory exists."
    fi
}

setup() {
    echo "setup"
    mkdir blocks
    mkdir database
    mkdir logs
}

teardown() {
    kill "$(cat idxr_pid)" 2>/dev/null || true
    rm -f ./idxr_pid
    rm -rf ./blocks
    rm -rf ./database
    rm -rf ./logs
    rm -f ./mina-indexer.sock
}

test_indexer_cli_reports() {
    test=test_indexer_cli_reports

    # Indexer reports usage with no arguments
    idxr 2>&1 |
        grep -iq "Usage:"

    # Indexer reports usage for server subcommand
    idxr_server 2>&1 |
        grep -iq "Usage: mina-indexer server"

    # Indexer server cli subcommand works with default args
    idxr_server --help 2>/dev/null

    # Indexer reports usage for client subcommands
    idxr account --help 2>&1 |
        grep -iq "Usage: mina-indexer account"

    idxr best-chain --help 2>&1 |
        grep -iq "Usage: mina-indexer best-chain"

    idxr best-ledger --help 2>&1 |
        grep -iq "Usage: mina-indexer best-ledger"

    idxr checkpoint --help 2>&1 |
        grep -iq "Usage: mina-indexer checkpoint"

    idxr ledger --help 2>&1 |
        grep -iq "Usage: mina-indexer ledger"

    idxr ledger-at-height --help 2>&1 |
        grep -iq "Usage: mina-indexer ledger-at-height"

    idxr summary --help 2>&1 |
        grep -iq "Usage: mina-indexer summary"

    idxr shutdown --help 2>&1 |
        grep -iq "Usage: mina-indexer shutdown"

    idxr tx-hash --help 2>&1 |
        grep -iq "Usage: mina-indexer tx-hash"

    idxr tx-public-key --help 2>&1 |
        grep -iq "Usage: mina-indexer tx-public-key"

    idxr tx-state-hash --help 2>&1 |
        grep -iq "Usage: mina-indexer tx-state-hash"
}

# Indexer server starts up without any precomputed blocks
test_server_startup() {
    test=test_server_startup
    
    setup
    idxr_server_start \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs
    sleep 5

    result=$(idxr summary -j | jq -r .witness_tree.canonical_tip_hash)
    assert '3NKeMoncuHab5ScarV5ViyF16cJPT4taWNSaTLS64Dp67wuXigPZ' $result

    teardown
}

# Indexer server ipc is available during initialization
test_ipc_is_available_immediately() {
    test=test_ipc_is_available_immediately

    setup
    dl_mainnet 100 ./blocks

    idxr_server_start \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs \
        --genesis-ledger "$LEDGER" \
        --root-hash 3NKeMoncuHab5ScarV5ViyF16cJPT4taWNSaTLS64Dp67wuXigPZ
    sleep 2

    idxr summary
    teardown
}

# Indexer server starts and creates directories with minimal args
test_startup_dirs_get_created() {
    test=test_startup_dirs_get_created

    setup
    idxr_server_start \
        --startup-dir ./startup-blocks \
        --watch-dir ./watch-blocks \
        --database-dir ./database \
        --log-dir ./logs
    sleep 2

    assert_directory_exists "./startup-blocks"
    assert_directory_exists "./watch-blocks"
    assert_directory_exists "./database"
    assert_directory_exists "./logs"

    teardown
}

# Indexer server reports correct balance for Genesis Ledger Account
test_account_balance_cli() {
    test=test_account_balance_cli

    setup
    idxr_server_start \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs
    sleep 5

    result=$(idxr account -j --public-key B62qqDJCQsfDoHJvJCh1hgTpiVbmgBg8SbNKLMXsjuVsX5pxCELDyFk | jq -r .balance)
    assert '148837200000000' $result

    teardown
}

# Indexer server returns the correct account
test_account_public_key_json() {
    test=test_account_public_key_json

    setup
    idxr_server_start \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs
    sleep 5

    result=$(idxr account -j --public-key B62qqDJCQsfDoHJvJCh1hgTpiVbmgBg8SbNKLMXsjuVsX5pxCELDyFk | jq -r .public_key)
    assert 'B62qqDJCQsfDoHJvJCh1hgTpiVbmgBg8SbNKLMXsjuVsX5pxCELDyFk' $result

    teardown
}

# Indexer server returns the correct canonical tip
test_canonical_tip() {
    test=test_canonical_tip

    setup
    dl_mainnet 15 ./blocks

    idxr_server_start \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs
    sleep 5
    
    state_hash=$(idxr summary -j | jq -r .witness_tree.canonical_tip_hash)
    blockchain_length=$(idxr summary -j | jq -r .witness_tree.canonical_tip_length)
    
    assert 5 $blockchain_length
    assert '3NKQUoBfi9vkbuqtDJmSEYBQrcSo4GjwG8bPCiii4yqM8AxEQvtY' $state_hash

    teardown
}

# Indexer handles missing blocks correctly
test_missing_blocks() {
    test=test_missing_blocks

    setup
    dl_mainnet 10 ./blocks
    dl_mainnet_range 12 20 ./blocks # missing 11
    dl_mainnet_range 22 30 ./blocks # missing 21

    idxr_server_start \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs \
        --log-level-stdout debug &
    sleep 5

    # start out missing block 11 & 21
    num_dangling=$(idxr summary -j | jq -r .witness_tree.num_dangling)
    best_hash=$(idxr summary -j | jq -r .witness_tree.best_tip_hash)
    best_length=$(idxr summary -j | jq -r .witness_tree.best_tip_length)
    canonical_hash=$(idxr summary -j | jq -r .witness_tree.canonical_tip_hash)
    canonical_length=$(idxr summary -j | jq -r .witness_tree.canonical_tip_length)

    assert 2 $num_dangling
    assert 10 $best_length
    assert 1 $canonical_length
    assert '3NKGgTk7en3347KH81yDra876GPAUSoSePrfVKPmwR1KHfMpvJC5' $best_hash
    assert '3NKeMoncuHab5ScarV5ViyF16cJPT4taWNSaTLS64Dp67wuXigPZ' $canonical_hash

    # add missing block which connects the dangling branches
    dl_mainnet_single 21 ./blocks
    sleep 1

    # dangling branches combine
    # no new canonical blocks
    num_dangling=$(idxr summary -j | jq -r .witness_tree.num_dangling)
    best_hash=$(idxr summary -j | jq -r .witness_tree.best_tip_hash)
    best_length=$(idxr summary -j | jq -r .witness_tree.best_tip_length)
    canonical_hash=$(idxr summary -j | jq -r .witness_tree.canonical_tip_hash)
    canonical_length=$(idxr summary -j | jq -r .witness_tree.canonical_tip_length)

    assert 1 $num_dangling
    assert 10 $best_length
    assert 1 $canonical_length
    assert '3NKGgTk7en3347KH81yDra876GPAUSoSePrfVKPmwR1KHfMpvJC5' $best_hash
    assert '3NKeMoncuHab5ScarV5ViyF16cJPT4taWNSaTLS64Dp67wuXigPZ' $canonical_hash

    # add remaining missing block
    dl_mainnet_single 11 ./blocks
    sleep 1

    # dangling branches move into the root branch
    num_dangling=$(idxr summary -j | jq -r .witness_tree.num_dangling)
    best_hash=$(idxr summary -j | jq -r .witness_tree.best_tip_hash)
    best_length=$(idxr summary -j | jq -r .witness_tree.best_tip_length)
    canonical_hash=$(idxr summary -j | jq -r .witness_tree.canonical_tip_hash)
    canonical_length=$(idxr summary -j | jq -r .witness_tree.canonical_tip_length)

    assert 0 $num_dangling
    assert 30 $best_length
    assert 20 $canonical_length
    assert '3NLsuVoPLnRzdzjrdFKWmkqNzqNEQxrfa7iQMwu1WxcstZjmorUs' $best_hash
    assert '3NLPpt5SyVnD1U5uJAqR3DL1Cqj5dG26SuWutRQ6AQpbQtQUWSYA' $canonical_hash

    teardown
}

# Indexer server returns the correct best chain
test_best_chain() {
    test=test_best_chain

    setup
    mkdir best_chain
    dl_mainnet 12 ./blocks

    idxr_server_start \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs
    sleep 5

    result=$(idxr best-chain -n 1 | jq -r .[0].state_hash)
    assert '3NKkJDmNZGYdKVDDJkkamGdvNzASia2SXxKpu18imps7KqbNXENY' $result

    result=$(idxr best-chain -v | jq -r .[0].state_hash)
    assert '3NKkJDmNZGYdKVDDJkkamGdvNzASia2SXxKpu18imps7KqbNXENY' $result

    # best chain with bounds
    bounds=$(idxr best-chain \
        --start-state-hash 3NKd5So3VNqGZtRZiWsti4yaEe1fX79yz5TbfG6jBZqgMnCQQp3R \
        --end-state-hash 3NKQUoBfi9vkbuqtDJmSEYBQrcSo4GjwG8bPCiii4yqM8AxEQvtY \
        | jq -r .[0].state_hash)
    assert '3NKQUoBfi9vkbuqtDJmSEYBQrcSo4GjwG8bPCiii4yqM8AxEQvtY' $bounds

    bounds=$(idxr best-chain \
        --start-state-hash '3NKd5So3VNqGZtRZiWsti4yaEe1fX79yz5TbfG6jBZqgMnCQQp3R' \
        --end-state-hash '3NKQUoBfi9vkbuqtDJmSEYBQrcSo4GjwG8bPCiii4yqM8AxEQvtY' \
        | jq -r .[1].state_hash)
    assert '3NL9qBsNibXPm5Nh8cSg5CCqrbzX5VUVY9gJzAbg7EVCF3hfhazG' $bounds

    bounds=$(idxr best-chain --start-state-hash '3NKd5So3VNqGZtRZiWsti4yaEe1fX79yz5TbfG6jBZqgMnCQQp3R' \
        --end-state-hash '3NKQUoBfi9vkbuqtDJmSEYBQrcSo4GjwG8bPCiii4yqM8AxEQvtY' \
        | jq -r .[2].state_hash)
    assert '3NKd5So3VNqGZtRZiWsti4yaEe1fX79yz5TbfG6jBZqgMnCQQp3R' $bounds

    # write best chain to file
    file=./best_chain/best_chain.json
    idxr best-chain -p $file
    file_result=$(cat $file | jq -r .[0].state_hash)
    assert '3NKkJDmNZGYdKVDDJkkamGdvNzASia2SXxKpu18imps7KqbNXENY' $file_result

    idxr best-chain -v -p $file
    file_result=$(cat $file | jq -r .[0].state_hash)
    assert '3NKkJDmNZGYdKVDDJkkamGdvNzASia2SXxKpu18imps7KqbNXENY' $file_result

    rm -rf best_chain
    teardown
}

# Indexer server returns correct ledgers
test_ledgers() {
    test=test_ledgers

    setup
    mkdir ledgers
    dl_mainnet 15 ./blocks

    idxr_server_start \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs
    sleep 5

    pk='B62qp1RJRL7x249Z6sHCjKm1dbkpUWHRdiQbcDaz1nWUGa9rx48tYkR'

    # canonical ledgers match
    canonical_hash=$(idxr summary -j | jq -r .witness_tree.canonical_tip_hash)
    canonical_height=$(idxr summary -j | jq -r .witness_tree.canonical_tip_length)

    hash_balance=$(idxr ledger --hash $canonical_hash | jq -r .${pk}.balance)
    height_balance=$(idxr ledger-at-height --height $canonical_height | jq -r .${pk}.balance)
    assert '607904750000000' $hash_balance
    assert '607904750000000' $height_balance

    # best ledgers match
    best_hash=$(idxr summary -j | jq -r .witness_tree.best_tip_hash)
    best_height=$(idxr summary -j | jq -r .witness_tree.best_tip_length)

    best_result=$(idxr best-ledger | jq -r .${pk}.balance)
    hash_result=$(idxr ledger --hash $best_hash | jq -r .${pk}.balance)
    assert '607904750000000' $best_result
    assert '607904750000000' $hash_result

    # write ledgers to file
    file=./ledgers/best-$best_height-$best_hash.json
    idxr best-ledger -p $file
    
    file_result=$(cat $file | jq -r .${pk}.balance)
    assert '607904750000000' $file_result
    rm -f $file

    file=./ledgers/ledger-$best_height-$best_hash.json
    idxr ledger --hash $best_hash -p $file
    
    file_result=$(cat $file | jq -r .${pk}.balance)
    assert '607904750000000' $file_result
    rm -f $file

    file=./ledgers/height-$canonical_height-$best_hash.json
    idxr ledger-at-height --height $canonical_height -p $file
    
    file_result=$(cat $file | jq -r .${pk}.balance)
    assert '607904750000000' $file_result
    rm -f $file

    rm -rf ledgers
    teardown
}

# Indexer server syncs with existing Speedb
test_sync() {
    test=test_sync

    setup
    dl_mainnet 15 ./blocks

    idxr_server_start \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs
    sleep 5

    # pre-sync results
    canonical_hash=$(idxr summary -j | jq -r .witness_tree.canonical_tip_hash)
    canonical_length=$(idxr summary -j | jq -r .witness_tree.canonical_tip_length)
    best_hash=$(idxr summary -j | jq -r .witness_tree.best_tip_hash)
    best_length=$(idxr summary -j | jq -r .witness_tree.best_tip_length)

    # kill running indexer and release db lock
    kill "$(cat idxr_pid)" 2>/dev/null || true
    rm -f idxr_pid
    rm ./database/LOCK

    # sync from previous indexer db
    idxr_server sync \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs
    sleep 5

    # post-sync reults
    canonical_hash_sync=$(idxr summary -j | jq -r .witness_tree.canonical_tip_hash)
    canonical_length_sync=$(idxr summary -j | jq -r .witness_tree.canonical_tip_length)
    best_hash_sync=$(idxr summary -j | jq -r .witness_tree.best_tip_hash)
    best_length_sync=$(idxr summary -j | jq -r .witness_tree.best_tip_length)

    assert $canonical_hash $canonical_hash_sync
    assert $canonical_length $canonical_length_sync
    assert $best_hash $best_hash_sync
    assert $best_length $best_length_sync

    teardown
}

# Indexer server replays events
test_replay() {
    test=test_replay

    setup
    dl_mainnet 15 ./blocks

    idxr_server_start \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs
    sleep 5

    # pre-replay results
    canonical_hash=$(idxr summary -j | jq -r .witness_tree.canonical_tip_hash)
    canonical_length=$(idxr summary -j | jq -r .witness_tree.canonical_tip_length)
    best_hash=$(idxr summary -j | jq -r .witness_tree.best_tip_hash)
    best_length=$(idxr summary -j | jq -r .witness_tree.best_tip_length)
    num_blocks=$(idxr summary -j | jq -r .blocks_processed)

    # kill running indexer and release db lock
    kill "$(cat idxr_pid)" 2>/dev/null || true
    rm -f idxr_pid
    rm ./database/LOCK

    # replay events from previous indexer instance
    idxr_server replay \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs
    sleep 5

    # post-replay reults
    canonical_hash_replay=$(idxr summary -j | jq -r .witness_tree.canonical_tip_hash)
    canonical_length_replay=$(idxr summary -j | jq -r .witness_tree.canonical_tip_length)
    best_hash_replay=$(idxr summary -j | jq -r .witness_tree.best_tip_hash)
    best_length_replay=$(idxr summary -j | jq -r .witness_tree.best_tip_length)
    num_blocks_replay=$(idxr summary -j | jq -r .blocks_processed)

    assert $canonical_hash $canonical_hash_replay
    assert $canonical_length $canonical_length_replay
    assert $best_hash $best_hash_replay
    assert '15' $best_length
    assert $best_length $best_length_replay
    assert '15' $num_blocks
    assert $num_blocks $num_blocks_replay

    teardown
}

# Indexer server returns correct transactions
test_transactions() {
    test=test_transactions

    setup
    mkdir transactions
    dl_mainnet 13 ./blocks

    idxr_server_start \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs
    sleep 5

    # basic pk transaction queries
    transactions=$(idxr tx-public-key --public-key B62qp1RJRL7x249Z6sHCjKm1dbkpUWHRdiQbcDaz1nWUGa9rx48tYkR -j | jq -r .)
    amount=$(idxr tx-public-key -k B62qre3erTHfzQckNuibViWQGyyKwZseztqrjPZBv6SQF384Rg6ESAy -j | jq -r .[0].Payment.amount)

    assert '1000' $amount
    assert '[]' $transactions

    # basic pk transaction queries - verbose
    kind=$(idxr tx-public-key -k B62qre3erTHfzQckNuibViWQGyyKwZseztqrjPZBv6SQF384Rg6ESAy -j -v | jq -r .[0].command.payload.body.kind)
    amount=$(idxr tx-public-key -k B62qre3erTHfzQckNuibViWQGyyKwZseztqrjPZBv6SQF384Rg6ESAy -j -v | jq -r .[0].command.payload.body.amount)
    state_hash=$(idxr tx-public-key -k B62qre3erTHfzQckNuibViWQGyyKwZseztqrjPZBv6SQF384Rg6ESAy -j -v | jq -r .[0].state_hash)
    tx_hash=$(idxr tx-public-key -k B62qre3erTHfzQckNuibViWQGyyKwZseztqrjPZBv6SQF384Rg6ESAy -j -v | jq -r .[0].tx_hash)
    length=$(idxr tx-public-key -k B62qre3erTHfzQckNuibViWQGyyKwZseztqrjPZBv6SQF384Rg6ESAy -j -v | jq -r .[0].blockchain_length)

    assert 3 $length
    assert '1000' $amount
    assert 'Payment' $kind
    assert '3NKd5So3VNqGZtRZiWsti4yaEe1fX79yz5TbfG6jBZqgMnCQQp3R' $state_hash
    assert 'CkpZirFuoLVVab6x2ry4j8Ld5gMmQdak7VHW6f5C7VJYE34WAEWqa' $tx_hash

    # bounded pk transaction queries
    amount=$(idxr tx-public-key -k B62qre3erTHfzQckNuibViWQGyyKwZseztqrjPZBv6SQF384Rg6ESAy \
        --start-state-hash 3NL9qBsNibXPm5Nh8cSg5CCqrbzX5VUVY9gJzAbg7EVCF3hfhazG \
        --end-state-hash 3NKXzc1hAE1bK9BSkJUhBBSznMhwW3ZxUTgdoLoqzW6SvqVFcAw5 \
        | jq -r .[0].Payment.amount)
    assert '1000' $amount

    amount=$(idxr tx-public-key -k B62qre3erTHfzQckNuibViWQGyyKwZseztqrjPZBv6SQF384Rg6ESAy \
        --start-state-hash 3NLyWnjZqUECniE1q719CoLmes6WDQAod4vrTeLfN7XXJbHv6EHH \
        --end-state-hash 3NKd5So3VNqGZtRZiWsti4yaEe1fX79yz5TbfG6jBZqgMnCQQp3R \
        | jq -r .[0].Payment.amount)
    assert '1000' $amount

    # tx hash query
    amount=$(idxr tx-hash --tx-hash CkpZirFuoLVVab6x2ry4j8Ld5gMmQdak7VHW6f5C7VJYE34WAEWqa -j | jq -r .Payment.amount)
    assert '1000' $amount

    # tx hash query - verbose
    kind=$(idxr tx-hash --tx-hash CkpZirFuoLVVab6x2ry4j8Ld5gMmQdak7VHW6f5C7VJYE34WAEWqa -j -v | jq -r .command.payload.body.kind)
    amount=$(idxr tx-hash --tx-hash CkpZirFuoLVVab6x2ry4j8Ld5gMmQdak7VHW6f5C7VJYE34WAEWqa -j -v | jq -r .command.payload.body.amount)
    status=$(idxr tx-hash --tx-hash CkpZirFuoLVVab6x2ry4j8Ld5gMmQdak7VHW6f5C7VJYE34WAEWqa -j -v | jq -r .status.kind)
    tx_hash=$(idxr tx-hash --tx-hash CkpZirFuoLVVab6x2ry4j8Ld5gMmQdak7VHW6f5C7VJYE34WAEWqa -j -v | jq -r .tx_hash)
    state_hash=$(idxr tx-hash --tx-hash CkpZirFuoLVVab6x2ry4j8Ld5gMmQdak7VHW6f5C7VJYE34WAEWqa -j -v | jq -r .state_hash)
    length=$(idxr tx-hash --tx-hash CkpZirFuoLVVab6x2ry4j8Ld5gMmQdak7VHW6f5C7VJYE34WAEWqa -j -v | jq -r .blockchain_length)

    assert 3 $length
    assert 'Payment' $kind
    assert '1000' $amount
    assert 'Failed' $status
    assert 'CkpZirFuoLVVab6x2ry4j8Ld5gMmQdak7VHW6f5C7VJYE34WAEWqa' $tx_hash
    assert '3NKd5So3VNqGZtRZiWsti4yaEe1fX79yz5TbfG6jBZqgMnCQQp3R' $state_hash

    # state hash query
    amount=$(idxr tx-state-hash --state-hash 3NKd5So3VNqGZtRZiWsti4yaEe1fX79yz5TbfG6jBZqgMnCQQp3R -j | jq -r .[0].Payment.amount)
    source=$(idxr tx-state-hash --state-hash 3NKd5So3VNqGZtRZiWsti4yaEe1fX79yz5TbfG6jBZqgMnCQQp3R -j | jq -r .[0].Payment.source)
    receiver=$(idxr tx-state-hash --state-hash 3NKd5So3VNqGZtRZiWsti4yaEe1fX79yz5TbfG6jBZqgMnCQQp3R -j | jq -r .[0].Payment.receiver)

    assert '1000' $amount
    assert 'B62qre3erTHfzQckNuibViWQGyyKwZseztqrjPZBv6SQF384Rg6ESAy' $source
    assert 'B62qjYanmV7y9njVeH5UHkz3GYBm7xKir1rAnoY4KsEYUGLMiU45FSM' $receiver

    # state hash query - verbose
    kind=$(idxr tx-state-hash --state-hash 3NKd5So3VNqGZtRZiWsti4yaEe1fX79yz5TbfG6jBZqgMnCQQp3R -j -v | jq -r .[0].data.kind)
    assert 'Signed_command' $kind

    amount=$(idxr tx-state-hash --state-hash 3NKd5So3VNqGZtRZiWsti4yaEe1fX79yz5TbfG6jBZqgMnCQQp3R -j -v | jq -r .[0].data.payload.body.amount)
    source=$(idxr tx-state-hash --state-hash 3NKd5So3VNqGZtRZiWsti4yaEe1fX79yz5TbfG6jBZqgMnCQQp3R -j -v | jq -r .[0].data.payload.body.source_pk)
    receiver=$(idxr tx-state-hash --state-hash 3NKd5So3VNqGZtRZiWsti4yaEe1fX79yz5TbfG6jBZqgMnCQQp3R -j -v | jq -r .[0].data.payload.body.receiver_pk)
    token=$(idxr tx-state-hash --state-hash 3NKd5So3VNqGZtRZiWsti4yaEe1fX79yz5TbfG6jBZqgMnCQQp3R -j -v | jq -r .[0].data.payload.body.token_id)

    assert '1' $token
    assert '1000' $amount
    assert 'B62qre3erTHfzQckNuibViWQGyyKwZseztqrjPZBv6SQF384Rg6ESAy' $source
    assert 'B62qjYanmV7y9njVeH5UHkz3GYBm7xKir1rAnoY4KsEYUGLMiU45FSM' $receiver

    # write transactions to file
    file=./transactions/transactions.json
    idxr tx-public-key --public-key B62qre3erTHfzQckNuibViWQGyyKwZseztqrjPZBv6SQF384Rg6ESAy -p $file
    
    file_result=$(cat $file | jq -r .[0].Payment.amount)
    assert '1000' $file_result

    rm -rf ./transactions
    teardown
}

# Indexer server correctly creates a db checkpoint
test_checkpoint() {
    test=test_checkpoint

    setup
    dl_mainnet 13 ./blocks

    idxr_server_start \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs
    sleep 5

    # pre-checkpoint results
    canonical_hash=$(idxr summary -j | jq -r .witness_tree.canonical_tip_hash)
    canonical_length=$(idxr summary -j | jq -r .witness_tree.canonical_tip_length)
    best_hash=$(idxr summary -j | jq -r .witness_tree.best_tip_hash)
    best_length=$(idxr summary -j | jq -r .witness_tree.best_tip_length)
    amount=$(idxr tx-public-key -k B62qre3erTHfzQckNuibViWQGyyKwZseztqrjPZBv6SQF384Rg6ESAy -j -v | jq -r .[0].command.payload.body.amount)

    # create checkpoint in ./checkpoint
    idxr checkpoint -p ./checkpoint

    # kill running indexer and remove directories
    teardown

    # sync a new indexer from checkpointed db
    setup
    idxr_server sync \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./checkpoint \
        --log-dir ./logs
    sleep 5

    # post-checkpoint reults
    canonical_hash_checkpoint=$(idxr summary -j | jq -r .witness_tree.canonical_tip_hash)
    canonical_length_checkpoint=$(idxr summary -j | jq -r .witness_tree.canonical_tip_length)
    best_hash_checkpoint=$(idxr summary -j | jq -r .witness_tree.best_tip_hash)
    best_length_checkpoint=$(idxr summary -j | jq -r .witness_tree.best_tip_length)
    amount_checkpoint=$(idxr tx-public-key -k B62qre3erTHfzQckNuibViWQGyyKwZseztqrjPZBv6SQF384Rg6ESAy -j -v | jq -r .[0].command.payload.body.amount)

    assert $canonical_hash $canonical_hash_checkpoint
    assert $canonical_length $canonical_length_checkpoint
    assert $best_hash $best_hash_checkpoint
    assert $best_length $best_length_checkpoint
    assert $amount $amount_checkpoint

    rm -rf ./checkpoint
    teardown
}

# Indexer server starts with many blocks
test_many_blocks() {
    test=test_many_blocks

    setup
    dl_mainnet 1000 ./blocks

    idxr_server_start \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs \
        --ledger-cadence 100 \
        --log-level-stdout debug &
    sleep 60

    # results
    best_hash=$(idxr summary -j | jq -r .witness_tree.best_tip_hash)
    best_length=$(idxr summary -j | jq -r .witness_tree.best_tip_length)
    canonical_hash=$(idxr summary -j | jq -r .witness_tree.canonical_tip_hash)
    canonical_length=$(idxr summary -j | jq -r .witness_tree.canonical_tip_length)

    assert '1000' $best_length
    assert '990' $canonical_length
    assert '3NK9aySQJBEgAUKcWGrpbZhA4M8wL2N3cjipq3mEb4HPTuUkowEF' $canonical_hash
    assert '3NKrnCRmvomXqor8pnqrUsLv4XcofJBu8VWqAsWRirGNPszo1a66' $best_hash

    pk='B62qpJ4Q5J4LoBXgQBfq6gbXTyevFPhwMNYZEBdTSixmFq4UrdNadSN'

    # check ledgers are present
    # mainnet-100-3NKLtRnMaWAAfRvdizaeaucDPBePPKGbKw64RVcuRFtMMkE8aAD4.json
    balance=$(idxr ledger --hash 3NKLtRnMaWAAfRvdizaeaucDPBePPKGbKw64RVcuRFtMMkE8aAD4 | jq -r .${pk}.balance)
    assert '502777775000000' $balance

    # mainnet-900-3NLHqp2mkmWbf4o69J4hg5cftRAAvZ5Edy7uqvJUUVvZWtD1xRrh.json
    balance=$(idxr ledger --hash 3NLHqp2mkmWbf4o69J4hg5cftRAAvZ5Edy7uqvJUUVvZWtD1xRrh | jq -r .${pk}.balance)
    assert '502777775000000' $balance

    teardown
}

# Release version is fast
test_release() {
    test=test_release

    setup
    dl_mainnet 5000 ./blocks

    idxr_server_start \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs
        --log-level-stdout debug &
    sleep 30

    # results
    best_hash=$(idxr summary -j | jq -r .witness_tree.best_tip_hash)
    best_length=$(idxr summary -j | jq -r .witness_tree.best_tip_length)
    canonical_hash=$(idxr summary -j | jq -r .witness_tree.canonical_tip_hash)
    canonical_length=$(idxr summary -j | jq -r .witness_tree.canonical_tip_length)

    assert '5000' $best_length
    assert '4990' $canonical_length
    assert '3NKiyxhxfohCGpHkQg7TC1cNxHzAHbcHCUAdSM1aNt2u6dGtVrvC' $canonical_hash
    assert '3NLn1bsWFjycHNJGGLy3KSxXSW6ixmFrunn1iym5GWjTXxkt6oFi' $best_hash

    pk='B62qpJ4Q5J4LoBXgQBfq6gbXTyevFPhwMNYZEBdTSixmFq4UrdNadSN'

    # check ledgers are present
    # mainnet-100-3NKLtRnMaWAAfRvdizaeaucDPBePPKGbKw64RVcuRFtMMkE8aAD4.json
    balance=$(idxr ledger --hash 3NKLtRnMaWAAfRvdizaeaucDPBePPKGbKw64RVcuRFtMMkE8aAD4 | jq -r .${pk}.balance)
    assert '502777775000000' $balance

    # mainnet-900-3NLHqp2mkmWbf4o69J4hg5cftRAAvZ5Edy7uqvJUUVvZWtD1xRrh.json
    balance=$(idxr ledger --hash 3NLHqp2mkmWbf4o69J4hg5cftRAAvZ5Edy7uqvJUUVvZWtD1xRrh | jq -r .${pk}.balance)
    assert '502777775000000' $balance

    teardown
}

# Check command-line arguments
if [ "$#" -eq 0 ]; then
    # No arguments provided, run all tests
    test_indexer_cli_reports
    test_server_startup
    test_ipc_is_available_immediately
    test_startup_dirs_get_created
    test_account_balance_cli
    test_account_public_key_json
    test_canonical_tip
    test_missing_blocks
    test_best_chain
    test_ledgers
    test_sync
    test_replay
    test_transactions
    test_checkpoint
    test_many_blocks
else
    # Run only specified tests
    for test_name in "$@"; do
        case $test_name in
            "test_indexer_cli_reports") test_indexer_cli_reports ;;
            "test_server_startup") test_server_startup ;;
            "test_ipc_is_available_immediately") test_ipc_is_available_immediately ;;
            "test_startup_dirs_get_created") test_startup_dirs_get_created ;;
            "test_account_balance_cli") test_account_balance_cli ;;
            "test_account_public_key_json") test_account_public_key_json ;;
            "test_canonical_tip") test_canonical_tip ;;
            "test_missing_blocks") test_missing_blocks ;;
            "test_best_chain") test_best_chain ;;
            "test_ledgers") test_ledgers ;;
            "test_sync") test_sync ;;
            "test_replay") test_replay ;;
            "test_transactions") test_transactions ;;
            "test_checkpoint") test_checkpoint ;;
            "test_many_blocks") test_many_blocks ;;
            "test_release") test_release ;;
            *) echo "Unknown test: $test_name" ;;
        esac
    done
fi

echo "Done"
