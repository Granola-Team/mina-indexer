#!/bin/sh
set -ex

# Collect the binaries under test and the test ledger.
IDXR="$(pwd)"/target/debug/mina-indexer
LEDGER="$(pwd)"/tests/data/genesis_ledgers/mainnet.json
BLOCKS_FETCHER="$(pwd)"/download_blocks

# The rest of this script's logic assumes that the testing is done from within
# this temporary directory.
TEST_DIR="$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')"
cd "$TEST_DIR"

# Invoke this function when exiting this script for any reason.
test_cleanup() {
    err=$?
    if [ $err != 0 ]; then
        echo "\e[0;31mTest failed ($test): $err\e[0;37m"
        exit 1
    fi
    rm -rf "${TEST_DIR}"
}
trap test_cleanup EXIT

idxr() {
    "$IDXR" "$@"
}

dl_mainnet() {
    "$BLOCKS_FETCHER" mina_network_block_data "$1" mainnet "$2"
}

assert() {
    expected="$1"
    actual="$2"

    if [ "$expected" != "$actual" ]; then
        echo "\e[0;31mTest Failed: Expected $expected, but got $actual\e[0;37m"
        exit 1
    else
        echo "Test Passed!"
    fi
}

setup() {
    echo "setup"
    mkdir blocks
    mkdir database
    mkdir logs
}

teardown() {
    echo "Cleaning up and killing the background indexer with PID: ${idxr_pid}"
    kill "${idxr_pid}" 2>/dev/null || true
    rm -rf ./blocks
    rm -rf ./database
    rm -rf ./logs
    rm -f ./mina-indexer.sock
}

test_indexer_cli_reports() {
    test=test_indexer_cli_reports

    # Indexer reports usage with no arguments
    idxr 2>&1 |
        grep -iq "Usage:"

    # Indexer reports usage for server subcommand
    idxr server 2>&1 |
        grep -iq "Usage: mina-indexer server"

    # Indexer server config subcommand exists
    idxr server config 2>&1 |
        grep -iq "Usage: mina-indexer server config"

    # Indexer server cli subcommand works with default args
    idxr server cli --help 2>/dev/null

    # Indexer reports usage for client subcommands
    idxr account --help 2>&1 |
        grep -iq "Usage: mina-indexer account"

    idxr best-chain --help 2>&1 |
        grep -iq "Usage: mina-indexer best-chain"

    idxr best-ledger --help 2>&1 |
        grep -iq "Usage: mina-indexer best-ledger"

    idxr ledger --help 2>&1 |
        grep -iq "Usage: mina-indexer ledger"

    idxr ledger-at-height --help 2>&1 |
        grep -iq "Usage: mina-indexer ledger-at-height"

    idxr summary --help 2>&1 |
        grep -iq "Usage: mina-indexer summary"

    idxr shutdown --help 2>&1 |
        grep -iq "Usage: mina-indexer shutdown"
}

# Indexer server config passes cli with minimal args
test_indexer_basic_start() {
    test=test_indexer_basic_start

    setup
    idxr server cli \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs &
    sleep 1
    idxr_pid=$(pgrep mina-indexer)
    teardown
}

# Indexer server starts up without any precomputed blocks
test_server_startup() {
    test=test_server_startup
    
    setup
    idxr server cli \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs &
    sleep 10

    result=$(idxr summary -j | jq -r .witness_tree.canonical_tip_hash)
    assert '3NKeMoncuHab5ScarV5ViyF16cJPT4taWNSaTLS64Dp67wuXigPZ' $result
    idxr_pid=$(pgrep mina-indexer)
    teardown
}

# Indexer server ipc is available during initialization
test_ipc_is_available_immediately() {
    test=test_ipc_is_available_immediately

    setup
    dl_mainnet 100 ./blocks

    idxr server cli \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs \
        --genesis-ledger "$LEDGER" \
        --root-hash 3NKeMoncuHab5ScarV5ViyF16cJPT4taWNSaTLS64Dp67wuXigPZ &
    sleep 1

    idxr summary
    idxr_pid=$(pgrep mina-indexer)
    teardown
}

# Indexer server reports correct balance for Genesis Ledger Account
test_account_balance_cli() {
    test=test_account_balance_cli

    setup
    idxr server cli \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs &
    sleep 10

    result=$(idxr account -j --public-key B62qqDJCQsfDoHJvJCh1hgTpiVbmgBg8SbNKLMXsjuVsX5pxCELDyFk | jq -r .balance)
    assert '148837200000000' $result
    idxr_pid=$(pgrep mina-indexer)
    teardown
}

# Indexer server returns the correct account
test_account_public_key_json() {
    test=test_account_public_key_json
    setup

    idxr server cli \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs &
    sleep 5
    result=$(idxr account -j --public-key B62qqDJCQsfDoHJvJCh1hgTpiVbmgBg8SbNKLMXsjuVsX5pxCELDyFk | jq -r .public_key)
    assert 'B62qqDJCQsfDoHJvJCh1hgTpiVbmgBg8SbNKLMXsjuVsX5pxCELDyFk' $result
    idxr_pid=$(pgrep mina-indexer)
    teardown
}

assert_directory_exists() {
    directory="$1"

    if [ ! -d "$directory" ]; then
        echo "Test Failed: Expected directory $directory to exist, but it does not."
        exit 1
    else
        echo "Test Passed: Directory $directory exists."
    fi
}

test_startup_dirs_get_created() {
    test=test_startup_dirs_get_created
    setup

    idxr server cli \
        --startup-dir ./startup-blocks \
        --watch-dir ./watch-blocks \
        --database-dir ./database \
        --log-dir ./logs &
    sleep 5

    assert_directory_exists "./startup-blocks"
    assert_directory_exists "./watch-blocks"
    assert_directory_exists "./database"
    assert_directory_exists "./logs"

    idxr_pid=$(pgrep mina-indexer)
    teardown
}

# Indexer server returns the correct canonical tip
test_canonical_tip() {
    test=test_canonical_tip
    setup

    dl_mainnet 15 ./blocks
    idxr server cli \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs &
    sleep 20
    
    state_hash=$(idxr summary -j | jq -r .witness_tree.canonical_tip_hash)
    blockchain_length=$(idxr summary -j | jq -r .witness_tree.canonical_tip_length)
    
    assert 5 $blockchain_length
    assert '3NKQUoBfi9vkbuqtDJmSEYBQrcSo4GjwG8bPCiii4yqM8AxEQvtY' $state_hash

    idxr_pid=$(pgrep mina-indexer)
    teardown
}

# Indexer server returns correct ledgers
test_ledgers() {
    test=test_ledgers
    setup

    dl_mainnet 15 ./blocks
    idxr server cli \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs &
    sleep 20

    pk='B62qp1RJRL7x249Z6sHCjKm1dbkpUWHRdiQbcDaz1nWUGa9rx48tYkR'

    # canonical ledgers match
    canonical_hash=$(idxr summary -j | jq -r .witness_tree.canonical_tip_hash)
    canonical_length=$(idxr summary -j | jq -r .witness_tree.canonical_tip_length)
    hash_result=$(idxr ledger --hash $canonical_hash | jq -r .${pk}.balance)
    length_result=$(idxr ledger-at-height --height $canonical_length | jq -r .${pk}.balance)
    assert $hash_result '607904750000000'
    assert $length_result '607904750000000'

    # best ledgers match
    best_hash=$(idxr summary -j | jq -r .witness_tree.best_tip_hash)
    best_result=$(idxr best-ledger | jq -r .${pk}.balance)
    hash_result=$(idxr ledger --hash $best_hash | jq -r .${pk}.balance)
    assert $best_result $hash_result
    assert $best_result '607904750000000'

    idxr_pid=$(pgrep mina-indexer)
    teardown
}

# Indexer server syncs with existing rocksdb
test_sync() {
    test=test_sync
    setup

    dl_mainnet 15 ./blocks
    idxr server cli \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs &
    sleep 20

    # pre-sync results
    canonical_hash=$(idxr summary -j | jq -r .witness_tree.canonical_tip_hash)
    canonical_length=$(idxr summary -j | jq -r .witness_tree.canonical_tip_length)
    best_hash=$(idxr summary -j | jq -r .witness_tree.best_tip_hash)
    best_length=$(idxr summary -j | jq -r .witness_tree.best_tip_length)

    # kill running indexer and release db lock
    idxr_pid=$(pgrep mina-indexer)
    kill "${idxr_pid}" 2>/dev/null || true
    rm ./database/LOCK

    # sync from previous indexer db
    idxr server sync \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs &
    sleep 20

    # post-sync reults
    canonical_hash_sync=$(idxr summary -j | jq -r .witness_tree.canonical_tip_hash)
    canonical_length_sync=$(idxr summary -j | jq -r .witness_tree.canonical_tip_length)
    best_hash_sync=$(idxr summary -j | jq -r .witness_tree.best_tip_hash)
    best_length_sync=$(idxr summary -j | jq -r .witness_tree.best_tip_length)

    assert $canonical_hash $canonical_hash_sync
    assert $canonical_length $canonical_length_sync
    assert $best_hash $best_hash_sync
    assert $best_length $best_length_sync

    idxr_pid=$(pgrep mina-indexer)
    teardown
}

# Indexer server replays events
test_replay() {
    test=test_replay
    setup

    dl_mainnet 15 ./blocks
    idxr server cli \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs &
    sleep 20

    # pre-replay results
    canonical_hash=$(idxr summary -j | jq -r .witness_tree.canonical_tip_hash)
    canonical_length=$(idxr summary -j | jq -r .witness_tree.canonical_tip_length)
    best_hash=$(idxr summary -j | jq -r .witness_tree.best_tip_hash)
    best_length=$(idxr summary -j | jq -r .witness_tree.best_tip_length)
    num_blocks=$(idxr summary -j | jq -r .block_processed)

    # kill running indexer and release db lock
    idxr_pid=$(pgrep mina-indexer)
    kill "${idxr_pid}" 2>/dev/null || true
    rm ./database/LOCK

    # replay events from previous indexer instance
    idxr server replay \
        --startup-dir ./blocks \
        --watch-dir ./blocks \
        --database-dir ./database \
        --log-dir ./logs &
    sleep 20

    # post-replay reults
    canonical_hash_sync=$(idxr summary -j | jq -r .witness_tree.canonical_tip_hash)
    canonical_length_sync=$(idxr summary -j | jq -r .witness_tree.canonical_tip_length)
    best_hash_sync=$(idxr summary -j | jq -r .witness_tree.best_tip_hash)
    best_length_sync=$(idxr summary -j | jq -r .witness_tree.best_tip_length)
    num_blocks_sync=$(idxr summary -j | jq -r .block_processed)

    assert $canonical_hash $canonical_hash_sync
    assert $canonical_length $canonical_length_sync
    assert $best_hash $best_hash_sync
    assert $best_length $best_length_sync
    assert $num_blocks $num_blocks_sync

    idxr_pid=$(pgrep mina-indexer)
    teardown
}

# Check command-line arguments
if [ "$#" -eq 0 ]; then
    # No arguments provided, run all tests
    test_indexer_cli_reports
    test_indexer_basic_start
    test_server_startup
    test_ipc_is_available_immediately
    test_account_balance_cli
    test_account_public_key_json
    test_startup_dirs_get_created
    test_canonical_tip
    test_ledgers
    test_sync
    test_replay
else
    # Run only specified tests
    for test_name in "$@"; do
        case $test_name in
            "test_indexer_cli_reports") test_indexer_cli_reports ;;
            "test_indexer_basic_start") test_indexer_basic_start ;;
            "test_server_startup") test_server_startup ;;
            "test_ipc_is_available_immediately") test_ipc_is_available_immediately ;;
            "test_account_balance_cli") test_account_balance_cli ;;
            "test_account_public_key_json") test_account_public_key_json ;;
            "test_startup_dirs_get_created") test_startup_dirs_get_created ;;
            "test_canonical_tip") test_canonical_tip ;;
            "test_ledgers") test_ledgers ;;
            "test_sync") test_sync ;;
            "test_replay") test_replay ;;
            *) echo "Unknown test: $test_name" ;;
        esac
    done
fi

echo "Done"
