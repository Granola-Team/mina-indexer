#! /usr/bin/env bash

set -eux
set -o pipefail

VER="$(git rev-parse --short=8 HEAD)"
LOG=/mnt/mina-logs/"$VER"-log
src="$(pwd)"
IDXR="${src}/result/bin/mina-indexer"
socket="$src"/mina-indexer.sock
export RUST_BACKTRACE=1

wait_for_socket() {
    while true; do
        if [ -S "$socket" ]; then
            return
        fi
        sleep 60
    done
}

ephemeral_port() {
    set +e
    LOW_BOUND=49152
    RANGE=16384
    while true; do
        CANDIDATE=$(( LOW_BOUND + (RANDOM % RANGE) ))
        if ! (echo "" >/dev/tcp/127.0.0.1/${CANDIDATE}) >/dev/null 2>&1; then
            echo $CANDIDATE
            break
        fi
    done
    set -e
}

mkdir -p "$LOG"

port="$(ephemeral_port)"

"${IDXR}" \
  --domain-socket-path "$socket" \
  server start \
    --web-port "$port" \
    --log-level DEBUG \
    --genesis-ledger "$src"/data/genesis_ledgers/mainnet.json \
    --database-dir /mnt/mina-logs/"$VER"-database \
    --blocks-dir /mnt/mina-logs/mina_network_block_data \
    --staking-ledgers-dir /mnt/mina-logs/mina_network_ledger_data \
    --locked-supply-csv "$src"/data/locked.csv \
    --ledger-cadence 5000 \
    > "$LOG"/out \
    2> "$LOG"/err \
    &
PID=$!
wait_for_socket

# Tell the server to take a snapshot (checkpoint).
#
"${IDXR}" \
  --domain-socket-path "$socket" \
  checkpoints create \
    --path /mnt/mina-logs/"$VER"-snapshot

"${IDXR}" --domain-socket-path "$socket" shutdown
wait "$PID"

# See if 'replay' works.
#
"${IDXR}" \
  --domain-socket-path "$socket" \
  server replay \
    --web-port "$port" \
    --log-level DEBUG \
    --genesis-ledger "$src"/data/genesis_ledgers/mainnet.json \
    --database-dir /mnt/mina-logs/"$VER"-database \
    --blocks-dir /mnt/mina-logs/mina_network_block_data \
    --staking-ledgers-dir /mnt/mina-logs/mina_network_ledger_data \
    --locked-supply-csv "$src"/data/locked.csv \
    --ledger-cadence 5000 \
    >> "$LOG"/out \
    2>> "$LOG"/err \
    &
PID=$!
wait_for_socket

"${IDXR}" --domain-socket-path "$socket" shutdown
wait "$PID"
