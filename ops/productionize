#! /usr/bin/env bash

set -eux
set -o pipefail

# Ensure that we are within the source tree.
#
SRC="$(git rev-parse --show-toplevel)"

# Confirm that the binary is present and working.
#
BIN="$SRC"/rust/target/release/mina-indexer
"$BIN" --version

# We must configure:
# 1. A directory to store files related to the mina-indexer, $PROD.
# 2. A directory in which to store the logs.
# 3. A directory from which to read the blocks.
# 4. A directory from which to read the staking ledgers.
# 5. A directory that contains the "$SRC"/data directory for initialization.
# 6. The filesystem name of a socket to use for comms, $SOCKET.
# 7. A directory in which to store the database.

# 1. This is the directory that we intend to configure for production use.
#
PROD="$HOME"/mina-indexer
mkdir -p "$PROD"
cd "$PROD"

# 2. Ensure that the log directory exists.
#
mkdir -p ./log

# 3. Configure the './blocks' directory, downloading blocks from the
# granola-mina-blocks Linode bucket if need be. Note that the prior production
# instance may start to read these blocks, if it is running.
#
"$SRC"/ops/download-mina-blocks 4 ./blocks

# 4. Read the staging ledgers from the './staking-ledgers' directory.
#
"$SRC"/ops/download-staking-ledgers ./staking-ledgers

# 5. Configure the data directory.
#
cp -r "$SRC"/data .

# 6. Configure the socket. Terminate the prior production instance using the
# socket, if any. This will not work if we change the on-wire comms protocol
# for the shutdown command, note.
#
SOCKET=./mina-indexer.sock
if [ -e "$SOCKET" ]; then
    if "$SRC"/rust/target/release/mina-indexer \
           --socket "$SOCKET" \
           shutdown
    then
        :
    fi
    rm -f "$SOCKET"
fi

# 7. Create an empty database directory.
#
rm -fr ./database
mkdir ./database

# We must daemonize. This requires forking a child in a new session. This is
# done with 'setsid'. The child must itself create a grandchild that is the
# mina-indexer. We use a shell invocation with a terminal '&' to fork that
# second time. Do not attempt to "simplify" this unless you really know what
# you are doing.
#
setsid \
  sh -c \
    '"$@" 0< /dev/null 1>> ./log/out 2>> ./log/err &' \
    -- \
    "$SRC"/rust/target/release/mina-indexer \
      --socket "$SOCKET" \
      server start \
        --log-level DEBUG \
        --web-hostname 0.0.0.0 \
        --blocks-dir ./blocks \
        --staking-ledgers-dir ./staking-ledgers \
        --genesis-ledger ./data/genesis_ledgers/mainnet.json \
        --locked-supply-csv ./data/locked.csv \
        --database-dir ./database \
  &

# Wait for the above to return, otherwise the above fork'd process may not
# fully launch.
#
wait $!
