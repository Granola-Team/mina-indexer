#! /usr/bin/env bash

set -eux
set -o pipefail

# The first argument is the short commit hash of the production database.
#
VER="${1:-$(git rev-parse --short HEAD)}"

# Ensure the database directory exists.
#
VERSIONED_DB_DIR=/mnt/mina-log-storage/"$VER"-database
if [ ! -e "$VERSIONED_DB_DIR" ]; then
    echo "$VERSIONED_DB_DIR does not exist. Exiting." 1>&2
    exit 1
fi

# Ensure that we are within the source tree.
#
SRC="$(git rev-parse --show-toplevel)"

# This is the directory that we intend to configure for production use.
#
PROD=/mnt/mina-log-storage/production
mkdir -p "$PROD"

# Terminate the prior production instance. This will not work if we change the
# on-wire comms protocol for the shutdown command, note.
#
SOCKET="$PROD"/mina-indexer.sock
if [ -e "$SOCKET" ]; then
    ./rust/target/release/mina-indexer --domain-socket-path "$SOCKET" shutdown
fi

# Now we know that the production instance is not running, so we can safely use
# the database directory.
#
DB_DIR="$PROD"/database
rm -f "$DB_DIR"
ln -s "$VERSIONED_DB_DIR" "$DB_DIR"

# Ensure that the log directory exists.
#
LOG="$PROD"/log
mkdir -p "$LOG"

# We must daemonize. This requires forking a child in a new session. This is
# done with 'setsid'. The child must itself create a grandchild that is the
# mina-indexer. We use a shell invocation with a terminal '&' to fork that
# second time. Do not attempt to "simplify" this unless you really know what
# you are doing.
#
setsid \
  sh -c \
    '"$@" 0< /dev/null 1>> '"$LOG"'/out 2>> '"$LOG"'/err &' \
    -- \
    ./rust/target/release/mina-indexer \
      --domain-socket-path "$SOCKET" \
      server start \
        --log-level DEBUG \
        --web-hostname 0.0.0.0 \
        --genesis-ledger "$SRC"/data/genesis_ledgers/mainnet.json \
        --locked-supply-csv "$SRC"/data/locked.csv \
        --blocks-dir /mnt/mina-log-storage/mina_network_block_data \
        --staking-ledgers-dir /mnt/mina-log-storage/mina_network_ledger_data \
        --database-dir "$DB_DIR" \
  &

# Wait for the above to return, otherwise the above fork'd process may not
# fully launch.
#
wait $!

echo "Productionized!"
