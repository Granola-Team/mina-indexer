version = 1

[install]
# Rust toolchain
nightly-rust.flake = "github:nix-community/fenix/monthly#default.toolchain"
rust-lib-src.pkg-path = "rustPlatform.rustLibSrc"
rust-lib-src.pkg-group = "rust-toolchain"
libiconv.pkg-path = "libiconv"
libiconv.systems = ["aarch64-darwin", "x86_64-darwin"]

# rust-analyzer goes in its own group because it's updated
# on a different cadence from the compiler and doesn't need
# to match versions
rust-analyzer.pkg-path = "rust-analyzer"
rust-analyzer.pkg-group = "rust-analyzer"
zld.pkg-path = "zld"
zld.systems = ["aarch64-darwin", "x86_64-darwin"]
glibc.pkg-path = "glibc"
glibc.systems = ["aarch64-linux", "x86_64-linux"]
gcc.pkg-path = "gcc"
gcc.systems = ["aarch64-linux", "x86_64-linux"]
openssl.pkg-path = "openssl"
openssl.systems = ["aarch64-linux", "x86_64-linux"]

# Ruby
ruby.pkg-path = "ruby"
standard.pkg-path = "rubyPackages.standard"

# Database
duckdb.pkg-path = "duckdb"
postgresql_16.pkg-path = "postgresql_16"
timescaledb.pkg-path = "timescaledb"
sqlfluff.pkg-path = "sqlfluff"

# Cargo
cargo-machete.pkg-path = "cargo-machete"
cargo-edit.pkg-path = "cargo-edit"

# Misc

[vars]
PGPORT = "9002"
PGUSER = "mina_indexer"
PGPASS = "mina_indexer"
PGDATABASE = "mina_indexer"

[hook]
on-activate = """
    export SESSION_SECRET=$(head -c 55 /dev/urandom | base64)
    export PGDATA=$PWD/postgres_data
    export PGHOST=$PWD/postgres
    export LOG_PATH=$PGHOST/LOG
    export DATABASE_URL=postgresql:///$PGDATABASE?host=$PGHOST&port=$PGPORT

    mkdir -p $PGHOST
    chmod 0700 $PGHOST

    if [ ! -d \"$PGDATA\" ]; then
        echo 'Initializing postgresql database...'
        initdb $PGDATA --username $PGUSER -A md5 --pwfile=<(echo $PGPASS) --auth=trust

        # Configure postgresql.conf
        cat > \"$PGDATA/postgresql.conf\" << EOF
shared_preload_libraries = 'timescaledb'
max_connections = 100
shared_buffers = '1GB'
effective_cache_size = '3GB'
maintenance_work_mem = '256MB'
timescaledb.telemetry_level = off
unix_socket_permissions = 0700
unix_socket_directories = '${PGHOST}'
listen_addresses = '*'
port = ${PGPORT}
EOF
    fi

    if ! pg_ctl status > /dev/null; then

        # Clean up any stale files
        sleep 1
        rm -f $PGHOST/.s.PGSQL.* || true

        echo "Starting PostgreSQL"
        pg_ctl -D $PGDATA -o "-k $PGHOST" -l $LOG_PATH start

        until pg_isready -h $PGHOST -p $PGPORT -U $PGUSER; do
            echo "Waiting for PostgreSQL to start"
            sleep 1
        done

        if ! psql -U $PGUSER -h $PGHOST -p $PGPORT -d postgres -lqt | cut -d \\| -f 1 | grep -qw $PGDATABASE; then
            echo "Creating database since it doesn't exist"
            createdb -U $PGUSER -h $PGHOST -p $PGPORT $PGDATABASE
        fi

        psql -d $PGDATABASE -c \"CREATE EXTENSION IF NOT EXISTS timescaledb\"
    fi
"""

[profile]

[options]
systems = ["aarch64-darwin", "x86_64-darwin", "aarch64-linux", "x86_64-linux"]
